{"version":3,"sources":["components/Cita.js","components/Formulario.js","App.js","serviceWorker.js","index.js"],"names":["Cita","cita","eliminarCita","id","mascota","propietario","fecha","hora","sintomas","className","onClick","Formulario","crearCita","useState","setCita","error","setError","handleChange","target","name","value","onSubmit","e","preventDefault","trim","uuidv4","type","placeholder","onChange","App","citasIniciales","JSON","parse","localStorage","getItem","citas","setCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2d6f11f7.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Cita = ({cita, eliminarCita}) => {\r\n\r\n    const { id,mascota, propietario, fecha, hora ,sintomas }= cita;\r\n\r\n    const handleClick=()=>{\r\n        eliminarCita(id);\r\n    }\r\n    \r\n    return (\r\n        <div \r\n            id ={id}\r\n            className=\"cita\"\r\n        >\r\n            <p>Mascota: <span>{ mascota }  </span> </p>\r\n            <p>Propietario: <span>{ propietario }  </span> </p>\r\n            <p>Fecha: <span>{ fecha }  </span> </p>\r\n            <p>Hora: <span>{ hora }  </span> </p>\r\n            <p>Síntomas: <span>{ sintomas }  </span> </p>\r\n\r\n            <button\r\n                className=\"button eliminar u-full-width\"\r\n                onClick={ handleClick }\r\n            >Eliminar &times;</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nCita.propTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Cita\r\n","import React, { useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n    // Crear State de Citas\r\n    const [cita, setCita] = useState({\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha:'',\r\n        hora:'',\r\n        sintomas:''\r\n    });\r\n\r\n    const [error, setError] = useState(false)\r\n\r\n    // Funcion que se ejecuta cada vez que el usurio escribe en el input\r\n    const handleChange = ({target})=>{\r\n        setCita({\r\n            ...cita,\r\n            [target.name]:target.value\r\n        })\r\n    }\r\n\r\n    // Extraer los valores\r\n    const { mascota, propietario, fecha, hora ,sintomas }= cita;\r\n\r\n    // Manejando cuando el usuario oprime Agregar ciota\r\n    const handleSubmit= e =>{\r\n        e.preventDefault();\r\n        \r\n        // Validar \r\n        if (mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === ''){\r\n            setError(true)\r\n            return;\r\n        }\r\n\r\n        // Eliminar mensaje de Error\r\n        setError(false);\r\n\r\n        // Asignar un id\r\n        cita.id = uuidv4()\r\n        \r\n\r\n        // Crear Cita \r\n        crearCita(cita);\r\n\r\n        // Reiniciar el form\r\n        setCita({\r\n            mascota: '',\r\n            propietario: '',\r\n            fecha:'',\r\n            hora:'',\r\n            sintomas:''\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>Crear Cita</h2>\r\n\r\n            { error &&  <p className=\"alerta-error\">Todos los campos son obligatorios</p>}\r\n\r\n            <form \r\n                onSubmit={handleSubmit}\r\n            >\r\n                <label>Nombre Mascota</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"mascota\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Mascota\"\r\n                    onChange={handleChange}\r\n                    value={ mascota }\r\n                />\r\n                <label>Nombre Dueño</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"propietario\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Dueño de la Mascota\"\r\n                    onChange={handleChange}\r\n                    value={ propietario }\r\n                />\r\n                <label>Fecha</label>\r\n                <input\r\n                    type=\"date\"\r\n                    name=\"fecha\"\r\n                    className=\"u-full-width\"\r\n                    onChange={handleChange}\r\n                    value={ fecha }\r\n                    \r\n                />\r\n                <label>Hora</label>\r\n                <input\r\n                    type=\"time\"\r\n                    name=\"hora\"\r\n                    className=\"u-full-width\"\r\n                    onChange={handleChange}\r\n                    value={ hora }\r\n                    \r\n                />\r\n                <label>Síntomas</label>\r\n                <textarea\r\n                    className=\"u-full-width\"\r\n                    name=\"sintomas\"\r\n                    onChange={handleChange}\r\n                    value={ sintomas }\r\n                ></textarea>\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                >Agregar Cita</button>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import React, { useEffect, useState } from 'react';\nimport Cita from './components/Cita';\nimport  Formulario  from './components/Formulario';\n\n\nfunction App() {\n\n  // citas en Local Storage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if(!citasIniciales){\n    citasIniciales = []\n  }\n\n  // Crear state de Citas(Arreglo de todas las citas)\n  const [citas, setCitas] = useState(citasIniciales);\n\n  // Use Effect para realizar ciertas operaciones cuando el state cambia\n  useEffect(() => {\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n    if(citasIniciales){\n      localStorage.setItem('citas', JSON.stringify(citas))\n    }else{\n      localStorage.setItem('citas', JSON.stringify([]))\n    }\n  }, [citas]);\n\n  //  Funcion que tome las citas actuales y agregue las nuevas\n  const crearCita = cita =>{\n    setCitas([...citas,cita])\n    \n  }\n  \n  //  Funcion eliminar cita por su id\n  const eliminarCita = id =>{\n    const nuevasCitas = citas.filter(cita => cita.id !== id);\n    setCitas(nuevasCitas);\n    \n  }\n\n  // mensaje condicional\n  const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus citas';\n\n  return (\n    <>\n      <h1>Administrador de Pacientes</h1>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario crearCita={crearCita}/>\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map(cita=>(\n              <Cita \n                key = {cita.id}\n                cita = {cita}\n                eliminarCita = {eliminarCita} \n              />\n            ))}\n          </div>\n        </div>\n      </div>\n\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}